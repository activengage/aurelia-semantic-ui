define(['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
	/* -*- javascript -*- */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.SemanticUIAttribute = exports.SemanticUIElement = undefined;
	exports.bindableEnum = bindableEnum;
	exports.bindableToggle = bindableToggle;

	var _dec, _class, _dec2, _class3;

	const UI_ATTRIBUTE_NAME = /SemanticUI(\w+)/;

	/**
  * SemanticUIElement -- base class for Semantic UI custom elements
  */
	let SemanticUIElement = exports.SemanticUIElement = (_dec = (0, _aureliaFramework.inject)(Element), _dec(_class = class SemanticUIElement {

		constructor(el) {
			this.logger = _aureliaFramework.LogManager.getLogger(this.constructor.name);
			this.element = el;
		}

		created(owningView, myView) {
			this.innerElement = this.element.querySelector(':first-child');
		}

		addCssClasses(...cssClasses) {
			this.logger.debug(`Adding CSS classes: ${ cssClasses } to inner element: ${ this.innerElement }`);
			this.innerElement.classList.add(...cssClasses);
		}

		removeCssClasses(...cssClasses) {
			this.logger.debug(`Removing CSS classes: ${ cssClasses } from inner element: ${ this.innerElement }`);
			this.innerElement.classList.remove(...cssClasses);
		}

	}) || _class);
	let SemanticUIAttribute = exports.SemanticUIAttribute = (_dec2 = (0, _aureliaFramework.inject)(Element), _dec2(_class3 = class SemanticUIAttribute {

		constructor(element) {
			this.logger = _aureliaFramework.LogManager.getLogger(this.constructor.name);
			this.element = element;
		}

		bind() {
			let nameMatch = UI_ATTRIBUTE_NAME.exec(this.constructor.name);

			if (nameMatch) {
				let attrName = nameMatch[1].toLowerCase().replace(/attribute$/, '');
				this.addCssClasses('ui', attrName);
			} else {
				this.logger.warn("Attribute class doesn't match the naming convention; ", "assuming it's going to manage the classList itself.");
			}
		}

		addCssClasses(...cssClasses) {
			this.element.classList.add(...cssClasses);
		}

		removeCssClasses(...cssClasses) {
			this.element.classList.remove(...cssClasses);
		}

	}) || _class3);
	function bindableEnum(...validValues) {
		// console.debug( "Bindable enum decorator called with: ", validValues );
		return function (target, name, descriptor) {
			let changedMethodName = `${ name }Changed`;
			// console.debug( "Setting up a ", changedMethodName, " method on ", target );
			target[changedMethodName] = function (newValue, oldValue) {
				this.logger.debug(`Changing ${ name } to ${ newValue } from ${ oldValue }`);

				this.removeCssClasses(oldValue);
				this.addCssClasses(newValue);
			};

			let originalBind = target.bind;
			target.bind = function (...args) {
				if (originalBind) {
					Reflect.apply(originalBind, this, args);
				}
				if (this[name]) {
					this.addCssClasses(this[name]);
				}
			};

			return (0, _aureliaFramework.bindable)(target, name, descriptor);
		};
	}

	function bindableToggle(target, name, descriptor) {
		// console.debug( "Bindable toggle decorator called with args: ", target, name, descriptor );
		let changedMethodName = `${ name }Changed`;
		// console.debug( "Setting up a ", changedMethodName, " method on ", target );
		target[changedMethodName] = function (newValue) {
			this.logger.debug(`Toggling ${ name } to ${ newValue ? 'on' : 'off' }.`);
			if (newValue) {
				this.addCssClasses(name);
			} else {
				this.removeCssClasses(name);
			}
		};

		let originalBind = target.bind;
		target.bind = function (...args) {
			this.logger.debug(`Bound for ${ name } toggle-able attribute: '${ this[name] }'.`);
			if (originalBind) {
				Reflect.apply(originalBind, this, args);
			}
			if (this[name] !== null && this[name] !== false) {
				this.addCssClasses(name);
			}
		};

		return (0, _aureliaFramework.bindable)(target, name, descriptor);
	}
});
//# sourceMappingURL=data:application/json;base64,
